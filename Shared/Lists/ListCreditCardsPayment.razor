@inject NavigationStacker navManager;
@inject Api api;

@if (loadingCards == true)
{
    <div class="w-full h-full flex flex-col justify-center items-center">
        <h1 class="text-white text-xl">Estamos carregando seus cartões cadastrados</h1>
        <Loading />
    </div>
}
else
{
    if (PartialCreditCards == null)
    {
        <div class="w-full h-full flex justify-center items-center">
            <div class="w-1/3 flex flex-col gap-3 px-2 py-5 gap-3">
                <ButtonStyled OnClick="UpdateCreditList">Tentar novamente</ButtonStyled>
            </div>
        </div>
    }
    else
    {
        if (!adicionarCartao)
        {
            <div class="text-lg text-black py-2 font-bold pl-2">Seus cartões: </div>
            <div class="w-full px-2 py-3 flex flex-col gap-2">
                @foreach (var creditNumber in PartialCreditCards)
                {
                    var cId = creditNumber.Id;
                    <h1 @onclick=@(async () => await onSelected?.Invoke(cId)) class="text-zinc-800 text-lg cursor-pointer">@creditNumber.CardNumber</h1>
                }
                <div class="w-[200px] py-3">
                    <ButtonStyled OnClick=@(() => {
                      adicionarCartao = true;
                      StateHasChanged();
                      })>Adicionar Cartão</ButtonStyled>
                </div>
            </div>
        }
    }
}

@code {
    [Parameter]
    public OnSelectedHandler? onSelected { get; set; }

    bool adicionarCartao = false;
    public bool loadingCards = true;
    private List<Teste>? PartialCreditCards = null;

    protected override async Task OnInitializedAsync()
    {
        await UpdateCreditList();
    }

    async Task UpdateCreditList()
    {
        loadingCards = true;
        StateHasChanged();

        var res = await api.Get(api.account.getCreditCards, await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == true)
        {
            var json = await res.Content.ReadAsStringAsync();
            PartialCreditCards = JsonSerializer.Deserialize<List<Teste>>(json);
        }

        loadingCards = false;
        StateHasChanged();
    }

    public class Teste
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("cardNumber")]
        public string CardNumber { get; set; } = string.Empty;
    }

    public delegate Task OnSelectedHandler(int cardId);
}