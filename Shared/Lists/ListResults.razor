@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Diagnostics.CodeAnalysis;
@inject Api api;
@inject LocalStorage localStorage;


<div class="flex flex-col w-full gap-1 items-center">
        @if (!loadingResults)
        {
            <div class="w-full h-fit flex flex-col gap-1 items-center">
                @if (searchResults == null)
                {
                    <h1>Houve algo de errado por favor tente novamente alguns instantes</h1>
                }
                else
                {
                    <table class="text-white md:w-[70%]">
                        <thead>
                            <tr>
                                <td width="32px"></td>
                                <td align="center">Marca</td>
                                <td align="center">Origem</td>
                                <td align="center">Violação</td>
                                <td width="100px" align="center">Data</td>
                            </tr>
                        </thead>
                        <tbody class="pt-4">
                            @foreach (var result in searchResults.Results)
                            {
                                <SearchLine Result="result" />
                            }
                        </tbody>
                    </table>
                }
            </div>
        }
        else
        {
            <div class="w-full h-1/3 flex flex-col justify-center items-center">
                <h1 class="text-3xl text-white">Loading....</h1>
            </div>
        }
        <Pagination @ref=pagination CountPages="searchResults?.CountPages ?? 1" UpdateResults="CheckSpecify" />
</div>


@code {
    [Parameter]
    public bool IsEspecificy { get; set; }

    [Parameter]
    [AllowNull]
    public ClientMark ClientMark { get; set; }

    private bool loadingResults = true;
    private SearchResults? searchResults;
    private int currentPage { get => pagination?.currentPage ?? 1; }

    private Pagination pagination;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        loadingResults = true;
        if (!IsEspecificy)
        {

            var _currentPage = await localStorage.GetInSession("currentPage");
            var _lastPageChached = await localStorage.GetInSession("lastPage");

            if (!string.IsNullOrEmpty(_currentPage))
                pagination.currentPage = Convert.ToInt32(_currentPage);

            if (!string.IsNullOrEmpty(_lastPageChached))
            {                
                searchResults = JsonSerializer.Deserialize<SearchResults>(_lastPageChached);
            }
            else if (pagination != null)
            {
                pagination.currentPage = 1;
                await UpdateResults();
            }
        }
        else
        {
            var _currentPage = await localStorage.GetInSession("currentPageMark");
            var _lastMarkId = await localStorage.GetInSession("lastMarkId");

            if (_lastMarkId == currentPage.ToString())
            {
                pagination.currentPage = Convert.ToInt32(_currentPage);
                searchResults = JsonSerializer.Deserialize<SearchResults>(await localStorage.GetInSession("lastPageMark"));
            }
            else
            {
                await localStorage.SetCacheInSession("currentPageMark", "");
                await localStorage.SetCacheInSession("lastPageMark", "{}");
                await localStorage.SetCacheInSession("lastMarkId", "");
                pagination.currentPage = 1;
                await UpdateSpecifyResults();
            }
        }
        loadingResults = false;
        StateHasChanged();
    }

    async Task UpdateResults()
    {
        loadingResults = true;
        StateHasChanged();

        var response = await api.Get($"{api.walliClient.getResults}?page={currentPage}", await api.GetLoginHeader());

        if (response?.IsSuccessStatusCode == true)
        {
            searchResults = JsonSerializer.Deserialize<SearchResults>(await response.Content.ReadAsStringAsync());
            await localStorage.SetCacheInSession("lastPage", JsonSerializer.Serialize(searchResults));
            await localStorage.SetCacheInSession("currentPage", currentPage.ToString());
        }

        loadingResults = false;
        StateHasChanged();
    }

    async Task UpdateSpecifyResults()
    {
        loadingResults = true;
        StateHasChanged();

        var response = await api.Get($"{api.walliClient.getMarkResult}?markId={ClientMark.Id}&page={currentPage}", await api.GetLoginHeader());

        if (response?.IsSuccessStatusCode == true)
        {
            searchResults = JsonSerializer.Deserialize<SearchResults>(await response.Content.ReadAsStringAsync());
            await localStorage.SetCacheInSession("lastPageMark", JsonSerializer.Serialize(searchResults));
            await localStorage.SetCacheInSession("currentPageMark", currentPage.ToString());
        }

        StateHasChanged();
        loadingResults = false;
    }

    async Task CheckSpecify()
    {
        loadingResults = true;
        if (!IsEspecificy)
            await UpdateResults();
        else
            await UpdateSpecifyResults();

        loadingResults = false;
        StateHasChanged();
    }
    

    public class SearchResults
    {
        [JsonPropertyName("searchResults")]
        public SearchResult[] Results { get; set; }

        [JsonPropertyName("countPages")]
        public int CountPages { get; set; }
    }
}                                                                           