@page "/novaMarca/novaMarca";

@inject IJSRuntime js;
@inject NavigationStacker navManager;
@inject Api api;
@inject LocalStorage localStorage;

<div class="flex flex-col w-full h-full flex-1 gap-0.5 pb-6 bg-zinc-900 overflow-y-auto">
    <MarkseHeader>
        <ButtonCustom>@HeaderButtonText</ButtonCustom>
    </MarkseHeader>
    <BackButton />

    <div class="w-full flex flex-col justify-center items-center">
        <div class="w-full h-fit md:w-[60%]">
            <div class="w-full h-fit flex flex-col gap-1 justify-center items-center">
                <img class="w-[80%] max-h-[200px] object-contain" src="images/walli_logo.png" />
                <h1 class="text-zinc-100 text-[4vw] md:text-3xl">Adicione uma nova marca ao sistema</h1>
            </div>

            <div class="flex flex-col gap-3 w-full md:px-[100px]">
                <InputForm Id="bradName" Data="brandNameInput" Placeholder="Digite o nome de sua marca">Nome da marca</InputForm>
                <InputForm Id="ramo" Data="ramoInput" Placeholder="Digite o ramo de atuação">Ramo de atuação</InputForm>
                <InputTerms @ref=terms ListTerms="Terms" />
                <CheckListPlatforms @ref=checkLists />
            </div>

            <div class="w-full flex flex-1 py-3 items-center justify-center">
                <div class="w-[70%]">
                    @if (!savingMark)
                    {
                        <ButtonStyled OnClick="AddMarkToSystem">Salvar</ButtonStyled>
                    }
                    else{
                        <ButtonStyled BgColor="bg-green-700"><Loading /></ButtonStyled>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    InputData brandNameInput = new();
    InputData ramoInput = new();
    InputData termInput = new();
    InputData descontInput = new();

    private CheckListPlatforms checkLists;

    private InputTerms terms;
    private List<string> Terms = new();

    private bool savingMark = false;

    private string HeaderButtonText = "Nova Marca";

    protected override async Task OnInitializedAsync()
    {
        var loggedRole = await localStorage.Get("loggedRole");
        if (loggedRole == "walli_client")
        {
            HeaderButtonText = "Nova Marca";
        }
        else if (loggedRole == "master")
        {
            HeaderButtonText = "ADM";
        }
    }

    public async void AddMarkToSystem()
    {
        savingMark = true;
        StateHasChanged();

        var platformsList = checkLists.labels.Where(l => l.Value).Select(l => l.Key).ToList();
        Terms = terms.ListTerms;
        var findTerms = Terms.Select(t => new { term = t }).ToList();
        var data = new
        {
            brandName = brandNameInput.Value,
            ramo = ramoInput.Value,
            findTerms = findTerms,
            ignoreUrls = new dynamic[0],
            dayOfWeek = 1,
            platformsSelecteds = platformsList
        };

        var json = JsonSerializer.Serialize(data);
        var res = await api.Post(api.walliClient.addSearch, json, await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == true)
        {
            await navManager.NavigateTo("/index", registerPage: true);
        }
        else
        {
            savingMark = false;

            MessageErrorResponse? objError = null;
            try
            {
                if (res != null)
                    objError = JsonSerializer.Deserialize<MessageErrorResponse>(await res.Content.ReadAsStringAsync());
            }catch(Exception){}

            await js.InvokeVoidAsync("window.alert", objError?.MessageError ?? "Houve um erro inesperado por favor tente novamente");
        }

        StateHasChanged();
    }
}