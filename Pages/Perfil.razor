@page "/perfil";
@inject Api api;
@inject IJSRuntime js;
@inject NavigationStacker navManager;

<div class="w-full h-full overflow-y-auto gap-3 flex flex-col bg-zinc-800">
    @if (loading)
    {
        <div class="flex h-full flex-1 flex-col w-full justify-center items-center">
            <h1 class="text-white text-2xl font-semibold">Estamos carregando seus dados</h1>
            <Loading />
        </div>
    }
    else
    {
        if (haveError)
        {
            <div class="flex h-full flex-1 flex-col w-full justify-center items-center">
                <h1 class="text-white text-2xl font-semibold">Ops aconteceu um erro durante a solicitação</h1>
                <div class="w-[60%]">
                    <ButtonStyled OnClick="OnInitializedAsync">Tentar novamente</ButtonStyled>
                </div>
            </div>
        }
        else
        {
            <MarkseHeader />
            <div class="w-full flex-1 overflow-y-auto gap-5 flex-col">
                <div class="w-full flex flex-col items-center gap-2 justify-center">
                    <h1 class="text-white text-xl">Plano ativo</h1>
                    <h2 class="text-green-500 text-lg">
                        @{
                            if (assinature?.Level == 0)
                            {
                                <span>Gratuito</span>
                            }
                            else if (assinature?.Level == 1)
                            {
                                <span>Basico</span>
                            }
                            else if (assinature?.Level == 2)
                            {
                                <span>Premium</span>
                            }
                        }
                    </h2>
                    @if (assinature?.Level == 0 || assinature?.Level == 1)
                    {
                        <div class="flex w-[300px]">
                            <ButtonStyled OnClick=@(() => navManager.NavigateTo("/planos"))>Quero Dar um up no meu plano</ButtonStyled>
                        </div>
                    }
                </div>

                <ShowAddress Address="address" />
                <div class="w-full flex flex-col pl-4">
                    <ListCreditCards Cards="cards" />
                </div>

                <div class="w-full flex flex-col items-center">
                    <h2 class="text-white text-xl">Geração de relatorios</h2>
                    <div class="w-[80%] md:w-[75%] flex flex-col gap-3 pb-4 pt-2">
                        @if (!generatingRelatorio)
                        {
                            <ButtonStyled OnClick="GenerateRelatorioPdf">Gerar relatorio com violações PDF</ButtonStyled>
                            <ButtonStyled OnClick="GenerateRelatorioExcel">Gerar relatorio Excel</ButtonStyled>
                        }
                        else
                        {
                            <h1 class="text-white text-lg">Gerando seu relatirio por favor agurade</h1>
                            <Loading />
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    bool loading = true;
    bool haveError = false;

    bool generatingRelatorio = false;

    Assinature? assinature = null;
    UserAddress? address = null;
    List<ListCreditCards.Card>? cards = null;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        haveError = false;
        StateHasChanged();

        if (!await GetCurrentAssinature())
        {
            haveError = true;
            loading = false;
            StateHasChanged();
            return;
        }

        if (!await LoadAddress())
        {
            haveError = true;
            loading = false;
            StateHasChanged();
            return;
        }

        if (!await UpdateCreditList())
        {
            haveError = true;
            loading = false;
            StateHasChanged();
            return;
        }

        loading = false;
    }

    async Task<bool> UpdateCreditList()
    {
        StateHasChanged();

        var res = await api.Get(api.account.getCreditCards, await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == true)
        {
            var json = await res.Content.ReadAsStringAsync();
            cards = JsonSerializer.Deserialize<List<ListCreditCards.Card>>(json);
        }

        return res?.IsSuccessStatusCode == true;
    }

    async Task<bool> GetCurrentAssinature()
    {
        var res = await api.Get(api.walliClient.getCurrentPlan, await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == true)
        {
            assinature = JsonSerializer.Deserialize<Assinature>(await res.Content.ReadAsStringAsync());
        }

        return res?.IsSuccessStatusCode == true;
    }

    async Task<bool> LoadAddress()
    {
        var res = await api.Get(api.account.getRegisteredAddress, await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == true)
        {
            address = JsonSerializer.Deserialize<UserAddress>(await res.Content.ReadAsStringAsync()) ?? new();
        }
        else
        {
            address = null;
        }

        return res?.IsSuccessStatusCode == true;
    }

    async Task GenerateRelatorioExcel()
    {
        generatingRelatorio = true;
        StateHasChanged();

        await DownloadFileExcel();

        generatingRelatorio = false;
        StateHasChanged();

    }

    async Task GenerateRelatorioPdf()
    {
        generatingRelatorio = true;
        StateHasChanged();

        var response = await api.Get(api.walliClient.getRelatorioToken, await api.GetLoginHeader());

        if (response?.IsSuccessStatusCode == true)
        {
            var link = api.baseAddres + api.walliClient.generateRelatorioPdf + $"?userId={await response.Content.ReadAsStringAsync()}";
            await js.InvokeVoidAsync("generateDownloadLink", link);
        }
        else
        {
            await js.InvokeVoidAsync("window.alert", "Houve um erro inesperado por favor tente novamente!");
        }

        generatingRelatorio = false;
        StateHasChanged();
    }

    private async Task DownloadFileExcel()
    {
        var response = await api.Get(api.walliClient.getRelatorioToken, await api.GetLoginHeader());

        if (response?.IsSuccessStatusCode == true)
        {
            var link = api.baseAddres + api.walliClient.generateRelatorioExcel + $"?userId={await response.Content.ReadAsStringAsync()}";
            await js.InvokeVoidAsync("generateDownloadLink", link);
        }
        else
        {
            await js.InvokeVoidAsync("window.alert", "Houve um erro inesperado por favor tente novamente!");
        }
    }
}