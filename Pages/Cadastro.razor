@page "/cadastro";
@layout NoAuthLayout;
@using System.Text.Json;
@inject NavigationStacker navManager;
@inject Api api;
@inject LocalStorage localStorage;
@inject IJSRuntime js;

<div class="flex flex-col min-h-full w-full bg-zinc-800 items-center justify-center px-2 pt-5 text-zinc-50 gap-1 overflow-x-hidden py-3">
    <div class="h-[100px] mb-0 w-[300px] items-center justify-center flex">
        <img src="images/walli_logo.png" class="w-full h-full object-contain" />
    </div>
    <div class="flex w-full py-1 items-center justify-center">
        <h1>Faça seu cadastro</h1>
    </div>
    <div class="w-full md:w-[50%]">
        <div class="flex flex-col gap-2 w-full">
            @if (step == 1)
            {
                <InputForm Data="nameInput" Id="name" Placeholder="Digite seu nome" Type="text">Nome</InputForm>
                <InputForm Data="emailInput" Id="email" Placeholder="Digite seu email" Type="email">Email</InputForm>
                <InputForm Data="birthDate" Id="date" Type="date">Data de nascimento</InputForm>
                <InputForm Data="cpfInput" Id="cpf" Placeholder="Digite seu email" Mask="000.000.000-00" Type="text">CPF</InputForm>
                <InputForm Data="passwordInput" Id="password" Placeholder="Digite sua senha" Type="password">Senha</InputForm>
                <InputForm Data="repeatPasswordInput" Id="repeat-password" Placeholder="Repita sua senha" Type="password">Repetir senha</InputForm>
            }
            else if (step == 2)
            {
                <InputForm Data="cepInput" Id="cep" Placeholder="00000-000" Mask="00000-000" Type="text">Cep</InputForm>
                <InputForm Data="addressInput" Id="address" Placeholder="Digite seu endereço" Type="text">Endereço</InputForm>

                <div class="w-full flex flex-col">
                    <h1 class="text-white text-xl">Telefone</h1>
                    <div class="w-full flex flex-row gap-3">
                        <div class="w-[364px]">
                            <InputForm Data="dddInput" Id="ddd" Placeholder="00" Mask="00" Type="text">DDD</InputForm>
                        </div>
                        <InputForm Data="celFoneInput" Id="celfone" Placeholder="00000-0000" Type="text">Numero de telefone</InputForm>
                    </div>
                </div>
            }
        </div>
        <div class="w-full p-3">
            @{
                if (step >= 2)
                {
                    if (!isRequesting)
                    {
                        <button @onclick=Register class="bg-green-500 hover:bg-green-400 text-black font-semibold py-2 px-8 w-full rounded focus:outline-none focus:shadow-outline">
                            Registre se
                        </button>
                    }
                    else
                    {
                        <button disabled class="flex items-center justify-center bg-green-700 pointer-events-none text-black font-semibold py-2 px-8 w-full rounded focus:outline-none focus:shadow-outline">
                            <img style="width: 28px;" src="images/loading-circle.svg" />
                        </button>
                    }
                }
                else
                {
                    if (!isRequesting)
                    {
                        <button @onclick=NextStage class="bg-green-500 hover:bg-green-400 text-black font-semibold py-2 px-8 w-full rounded focus:outline-none focus:shadow-outline">
                            Proxima etapa
                        </button>
                    }
                    else
                    {
                        <button disabled class="flex items-center justify-center bg-green-700 pointer-events-none text-black font-semibold py-2 px-8 w-full rounded focus:outline-none focus:shadow-outline">
                            <img style="width: 28px;" src="images/loading-circle.svg" />
                        </button>
                    }
                }
            }
        </div>
        <div class="w-full flex items-end flex-col px-4">
            <h1 @onclick=@(() => navManager.NavigateTo("/login"))>Ja possui conta?</h1>
        </div>
        <div>
            @messageError
        </div>
    </div>
</div>

@code{
    int step = 1;

    InputData emailInput = new();
    InputData cpfInput = new();
    InputData birthDate = new();
    InputData passwordInput = new();
    InputData repeatPasswordInput = new();
    InputData nameInput = new();

    InputData cepInput = new();
    InputData addressInput = new();

    InputData dddInput = new();
    InputData celFoneInput = new();

    bool isRequesting = false;
    string messageError = "";

    private async Task NextStage()
    {
        if (step + 1 > 3)
        {
            step = 3;
        }
        else if (step + 1 < 1)
            step = 1;

        if (step + 1 == 2)
            if (!await ValidateUserCredentials())
            {
                StateHasChanged();
                return;
            }

        step++;
    }

    private async Task<bool> ValidateUserCredentials()
    {
        if (!emailInput.Value.Contains("@"))
        {
            await js.InvokeVoidAsync("window.alert", "@");
            return false;
        }

        if (passwordInput.Value.Contains(" "))
        {
            await js.InvokeVoidAsync("window.alert", "senha com espaço");
            return false;
        }

        if (passwordInput.Value != repeatPasswordInput.Value)
        {
            await js.InvokeVoidAsync("window.alert", "senha diferente");
            return false;
        }

        if (nameInput.Value.Length <= 1)
        {
            await js.InvokeVoidAsync("window.alert", "nome");
            return false;
        }

        var res = await api.Post(api.walliSellerUp.checkClientExists, JsonSerializer.Serialize(new
        {
            email = emailInput.Value,
            cpf = cpfInput.Value.Trim().Replace(".", "").Replace("-", "")
        }) , await api.GetLoginHeader());

        return res?.IsSuccessStatusCode == true;
    }

    private async Task<bool> ValidateAddress()
    {
        if (cepInput.Value.Replace("-", "").Replace(".", "").Length != 8)
        {
            await js.InvokeVoidAsync("window.alert", "Digite um cep valido!");

            return false;
        }

        return true;
    }

    private async Task Register()
    {
        if (!await ValidateAddress())
            return;

        isRequesting = true;
        StateHasChanged();
        var data = new
        {
            email = emailInput.Value,
            name = nameInput.Value,
            password = passwordInput.Value,

            indentification = cpfInput.Value,

            areaCode = dddInput.Value,
            number = celFoneInput.Value,

            birthdate = birthDate.Value,

            cep = cepInput.Value,
            lineAddress = addressInput.Value
        };

        Console.WriteLine(birthDate.Value);

        var res = await api.Post(api.account.register, JsonSerializer.Serialize(data), await api.GetLoginHeader());

        if (res != null)
        {
            if (res.IsSuccessStatusCode)
            {
                var user = JsonSerializer.Deserialize<User>(await res.Content.ReadAsStringAsync());
                await localStorage.Set("email", user.Email);
                await localStorage.Set("password", user.Password);
                await localStorage.Set("roles", JsonSerializer.Serialize(user.Roles));
                await localStorage.StartAuthSession();
                navManager.NavigateTo("/index");
            }
        }

        isRequesting = false;
        StateHasChanged();
    }

    public class ViaCepResponse
    {
        [JsonPropertyName("logradouro")]
        public string Logradouro { get; set; } = string.Empty;

        [JsonPropertyName("complemento")]
        public string Complemento { get; set; } = string.Empty;

        [JsonPropertyName("bairro")]
        public string Bairro { get; set; } = string.Empty;

        [JsonPropertyName("localidade")]
        public string Localidade { get; set; } = string.Empty;

        [JsonPropertyName("uf")]
        public string UF { get; set; } = string.Empty;

        [JsonPropertyName("erro")]
        public bool Error { get; set; }
    }
}