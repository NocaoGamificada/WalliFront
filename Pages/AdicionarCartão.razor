@page "/adicionar-cartão";
@inject IJSRuntime js;
@inject NavigationStacker navManager;
@inject Api api;

<div class="flex flex-col items-center gap-3 w-full h-full bg-zinc-800 overflow-y-auto py-2">
    <div @onsubmit=AdicionarCartao class="flex-col w-full md:max-w-[500px] md:w-[60%] ">
        <div class="w-full">
            <CardInput Data="cardNumber" Id="card-number" Mask="0000 0000 0000 0000" Placeholder="0000 0000 0000 0000">Número do cartão</CardInput>
        </div>
        <div class="w-full">
            <CardInput Data="cvv" Id="card-cvv" Mask="0000" Placeholder="0000">CVV - até 4 numeros</CardInput>
        </div>

        <div class="w-full flex flex-col gap-2">
            <label class="text-xl text-white">Vencimento do cartão</label>
            <div class="w-full flex flex-row">
                <input id="vencimentDay" @bind=vencimentMonth.Value type="text" class="shadow outline-0 border-0 w-[80px] py-2 bg-zinc-700 border rounded-2xl text-center text-white" />
                <span>/</span>
                <input id="vencimentYear" @bind=vencimentYear.Value type="text" class="shadow outline-0 border-0 w-[80px] py-2 bg-zinc-700 border rounded-2xl text-center text-white" />
            </div>
        </div>

        <div class="w-[40%] md:w-[400px]">
            <ButtonStyled OnClick="AdicionarCartao">Adicionar Cartão</ButtonStyled>
        </div>
    </div>
</div>

@code {
    InputData cvv = new();
    InputData cardNumber = new();
    InputData vencimentMonth = new();
    InputData vencimentYear = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("maskInput", "vencimentDay", "00", new { placeholder = "00" });
        await js.InvokeVoidAsync("maskInput", "vencimentYear", "00", new { placeholder = "00" });
    }

    private async Task AdicionarCartao()
    {
        var expMonth = int.Parse(vencimentMonth.Value);
        var expYear = int.Parse(vencimentYear.Value);
        var cvv = this.cvv.Value.Trim().Replace(".", " ");
        var cardNumber = this.cardNumber.Value.Trim().Replace(" ", "");

        if (cvv.Length < 3)
        {
            Console.WriteLine("cvv menor que 3");
            return;
        }

        if (cardNumber.Length != 16)
        {
            Console.WriteLine("card number: " + cardNumber + " " + cardNumber.Length);
            return;
        }

        var res = await api.Post(api.account.addCreditCard, JsonSerializer.Serialize(new
        {
            expMonth,
            expYear,
            cvv,
            cardNumber
        }), await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == false)
        {
            await js.InvokeVoidAsync("window.alert", "Houve algum erro por favor tente novamente!");
            return;
        }

        await navManager.NavigateBack();
    }
}