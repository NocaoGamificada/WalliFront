@page "/viewSearch/{SearchId:int}"
@inject Api api;
@inject NavigationStacker navManager;
@inject IJSRuntime js;
@inject LocalStorage localStorage;

@if (loading) {
    <div class="w-full h-full flex justify-center items-center">
        <Loading></Loading>
    </div>
}
else
{
    <div class="flex flex-col gap-2 w-full h-full bg-zinc-800 overflow-y-auto max-w-screen overflow-x-hidden">
        <MarkseHeader>
            <ButtonCustom>Nova Marca</ButtonCustom>
        </MarkseHeader>
        <BackButton></BackButton>
        <ContentLineView Value=@Termo>Termo</ContentLineView>
        <ContentLineView IsLink=true Value=@Link>Link</ContentLineView>
        <PreviewResult Result="result"></PreviewResult>
        
        @if (result?.Status != null)
        {
            <div class="w-full mt-4">
                <div class="bg-green-400 text-2xl px-1 py-2 rounded-3xl">
                    Status: @result.Status
                </div>
            </div>
        }
        else
        {
            if (loggedRole != "master" && loggedRole != "walli_expert")
            {
                <div class="w-full mt-4 flex justify-center items-center">
                    <div class="md:w-[60%] ms:w-[70%] flex flex-col gap-3">
                        @if (!denunciando)
                        {
                            <ButtonStyled OnClick=ChangeStatus>Considerar resultado</ButtonStyled>
                            <ButtonStyled OnClick=@(() => navManager.NavigateTo("/marca/denunciar/"+result.Id, true))>Denunciar Agora</ButtonStyled>
                        }
                        else
                        {
                            <ButtonStyled><Loading /></ButtonStyled>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="w-[70%] md:w-[40%] flex flex-col gap-3 pl-10">
                    <div class="flex flex-row gap-2">
                        <label class="text-xl text-white">Colidence</label>
                        <input type="checkbox" @bind=colidence />
                    </div>
                    <DropdownVertical Id="status-id" @ref=status OnChangeSelected=OnChangeSelect Data="data">
                        <CustomLabel>Status:</CustomLabel>
                    </DropdownVertical>
                </div>

                if (changed)
                {
                    <div class="py-2 w-full flex justify-center items-center">
                        <div class="w-[70%] md:w-[40%]">
                            <ButtonStyled OnClick="SaveChanges">Salvar alterações</ButtonStyled>
                        </div>
                    </div>
                }
            }
        }
    </div>
}

@code {
    [Parameter]
    public int SearchId { get; set; }
    private string? Date { get => $"{result?.Date.Day}/{(result?.Date.Month < 10 ? $"0{result?.Date.Month}" : result?.Date.Month)}/{result?.Date.Year}"; }
    bool loading = true;

    DropdownData[] data = new DropdownData[]
    {
        new(){ Label = "Nenhum", Value = "none" },
        new(){ Label = "teste2", Value = "t2" },
        new(){ Label = "teste3", Value = "t3" }
    };

    SearchResult? result = null;

    DropdownVertical? status;
    bool? colidence;

    string? Termo { get => result?.Term; }
    string? Link { get => result?.Link; }

    bool denunciando = false;

    bool changed = false;

    private string loggedRole = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loggedRole = await localStorage.GetLoggedRole();

            var url = "";
            if (loggedRole != "")
                url = api.walliSellerUp.getResult;
            else
                url = api.walliClient.getResult;

            var _res = await api.Get(url + $"?resultId={SearchId}", await api.GetLoginHeader());

            if (_res == null || _res?.IsSuccessStatusCode == false)
            {
                await navManager.NavigateBack();
                return;
            }

            result = JsonSerializer.Deserialize<SearchResult>(await _res.Content.ReadAsStringAsync());
            if (result == null)
            {
                await navManager.NavigateBack();
                return;
            }

            loading = false;
            StateHasChanged();

            await LoadStatus();
        }
    }

    async Task ChangeStatus()
    {
        denunciando = true;
        StateHasChanged();

        var res = await api.Put(api.walliClient.discreditResult + $"resultId={result.Id}", string.Empty, await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode != true)
        {
            MessageErrorResponse? objRes = null;
            try
            {
                if (res != null)
                    objRes = JsonSerializer.Deserialize<MessageErrorResponse>(await res.Content.ReadAsStringAsync());
            }catch(Exception){}

            await js.InvokeVoidAsync("window.alert", objRes?.MessageError ?? "Houve um erroinesperado por favor tente novamente!");
        }
        else
        {
            await js.InvokeVoidAsync("window.alert", "Estado mudado com sucesso");
            result.Analysis.Emotion = "bad";
        }

        denunciando = false;
        StateHasChanged();
    }

    async Task LoadStatus()
    {
        var res = await api.Get(api.walliSellerUp.getResultStatus+$"?resultId={SearchId}", await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == true)
        {
            var json = await res.Content.ReadAsStringAsync();
            ResultStatus? obj = JsonSerializer.Deserialize<ResultStatus>(json);

            if (obj != null)
            {
                var index = Array.IndexOf(data, data.FirstOrDefault(d => d.Value == obj.Status));
                if (index == -1)
                    index = 0;

                status.SelectedIndex = index;
            }
        }

        StateHasChanged();
    }

    async Task SaveChanges()
    {
        if (changed == false)
            return;

        var res = await api.Post(api.walliSellerUp.updateResultStatus, JsonSerializer.Serialize(new
        {
            status = status.Current.Value,
            collidence = colidence,
            searchResultId = result.Id
        }), await api.GetLoginHeader());

        if (res?.IsSuccessStatusCode == true)
        {
            await navManager.NavigateBack();
            return;
        }
        else
        {
            await js.InvokeVoidAsync("window.alert", "Houve algum erro ao tentar salvar o arquivo por favor tente novamente");
        }
    }

    void OnChangeSelect()
    {
        if (changed == false)
        {
            changed = true;
            StateHasChanged();
        }
    }

    public class ResultStatus
    {
        [JsonPropertyName("colidence")]
        public bool Colidence { get; set; }

        [JsonPropertyName("status")]
        public string Status { get; set; } = string.Empty;
    }
}